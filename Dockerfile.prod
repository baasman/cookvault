# Multi-stage Dockerfile for production deployment
# Stage 1: Frontend build
FROM node:18-alpine AS frontend-builder

WORKDIR /app/frontend

# Copy frontend package files
COPY frontend/package*.json ./
COPY frontend/yarn.lock* ./

# Install frontend dependencies
RUN npm ci --only=production

# Copy frontend source code
COPY frontend/ ./

# Build frontend for production
RUN npm run build

# Stage 2: Backend dependencies
FROM python:3.11-slim AS backend-deps

WORKDIR /app

# Install system dependencies for OCR and PostgreSQL
RUN apt-get update && apt-get install -y \
    tesseract-ocr \
    tesseract-ocr-eng \
    libtesseract-dev \
    libleptonica-dev \
    pkg-config \
    libpq-dev \
    gcc \
    g++ \
    libc6-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install UV for faster dependency management
RUN pip install --no-cache-dir uv

# Copy dependency files
COPY pyproject.toml ./

# Install Python dependencies
RUN uv pip install --system --no-cache .

# Stage 3: Production runtime
FROM python:3.11-slim AS production

# Create non-root user for security
RUN groupadd --gid 1000 appuser && \
    useradd --uid 1000 --gid appuser --shell /bin/bash --create-home appuser

WORKDIR /app

# Install runtime system dependencies only
RUN apt-get update && apt-get install -y \
    tesseract-ocr \
    tesseract-ocr-eng \
    libtesseract-dev \
    libleptonica-dev \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install UV for runtime
RUN pip install --no-cache-dir uv

# Copy Python dependencies from builder stage
COPY --from=backend-deps /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=backend-deps /usr/local/bin /usr/local/bin

# Copy backend application code
COPY backend/ ./backend/

# Copy frontend build from frontend builder
COPY --from=frontend-builder /app/frontend/dist ./frontend/dist

# Create necessary directories and set permissions
RUN mkdir -p /app/uploads /app/logs /app/backend/uploads /app/backend/logs && \
    chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Set working directory to backend
WORKDIR /app/backend

# Set environment variables
ENV FLASK_ENV=production
ENV PYTHONPATH=/app/backend
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV UV_PYTHON=python

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${PORT:-8000}/health || exit 1

# Expose port (configurable via environment variable)
EXPOSE ${PORT:-8000}

# Use startup script
COPY backend/start.sh ./
USER root
RUN chmod +x start.sh
USER appuser

# Start the application
CMD ["./start.sh"]